# zsh/bash compatible version
if [ -n "$ZSH_VERSION" ]; then
    # zsh
    export DEVENVROOT="$(cd "$(dirname "${(%):-%x}")/.." && pwd)"
elif [ -n "$BASH_VERSION" ]; then
    # bash
    export DEVENVROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
else
    # fallback
    export DEVENVROOT="$(cd "$(dirname "$0")/.." && pwd)"
fi

. ${DEVENVROOT}/scripts/env.d/vars

devenv() {
  . ${DEVENVROOT}/scripts/env.d/devenv_impl
  case "$1" in
    "")
      # create subshell to isolate name space
      (
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        if [ -z "${DEVENVFLAVOR}" ] ; then
          devenv_display "no active flavor: \$DEVENVFLAVOR not defined"
        else
          devenv_display "'${DEVENVFLAVOR}' is active: ${DEVENVFLAVORROOT}/${DEVENVFLAVOR}"
        fi
        devenv_display ""
        ${DEVENVROOT}/bin/devenv help
      )
      ;;
    use)
      shift
      if [ ! -d "${DEVENVFLAVORROOT}/$1" ]; then
        # create subshell to isolate name space
        (
          . ${DEVENVROOT}/scripts/func.d/bash_utils
            devenv_display -e "flavor $1 is not available"
        )
      else
        # cmd use need to manipulate current session's env variables
        # therefore subshell is not working here
        if [ ! -z "${DEVENVFLAVOR}" ] ; then
          devenv_act devenv_nameremove ${DEVENVFLAVOR}
        fi
        devenv_act devenv_namemunge $1
        export DEVENVCURRENTROOT=${DEVENVFLAVORROOT}/${DEVENVFLAVOR}
        echo "now using '${DEVENVFLAVOR}'"
      fi
      ;;
    off)
      # create subshell to isolate name space
      (
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        if [ -z "${DEVENVFLAVOR}" ] ; then
          devenv_display "\$DEVENVFLAVOR not defined"
          return
        fi

        devenv_display "the flavor '${DEVENVFLAVOR}' to be turned off"
      )

      devenv_act devenv_nameremove ${DEVENVFLAVOR}
      export DEVENVCURRENTROOT="/dev/null"
      ;;
    *)
      ${DEVENVROOT}/bin/devenv "$@"
      ;;
  esac
  # unset devenv internal functions
  unset -f devenv_nameremove
  unset -f devenv_namemunge
  unset -f devenv_act
}

_devenv() {

  local cur prev opts base cmd cmds flavors builds applications
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  base="${COMP_WORDS[0]}"
  cmd="${COMP_WORDS[1]}"

  case "${cmd}" in
    use|del)
      [[ $COMP_CWORD > 2 ]] && return 1
      flavors=$(
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        get_list flavor
      )
      COMPREPLY=(
        $(compgen -W "${flavors}" -- ${cur})
      )
      return 0
      ;;
    build)
      [[ $COMP_CWORD > 2 ]] && return 1
      builds=$(
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        get_list build
      )
      COMPREPLY=(
        $(compgen -W "${builds}" -- ${cur})
      )
      return 0
      ;;
    launch)
      [[ $COMP_CWORD > 2 ]] && return 1
      applications=$(
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        get_list application
      )
      COMPREPLY=(
        $(compgen -W "${applications}" -- ${cur})
      )
      return 0
      ;;
    *)
      [[ $COMP_CWORD > 1 ]] && return 1
      cmds=$(
        . ${DEVENVROOT}/scripts/func.d/bash_utils
        get_list cmd
      )
      cmds+=" use off"
      COMPREPLY=($(compgen -W "${cmds}" -- ${cur}))
      return 0
      ;;
  esac
}
complete -F _devenv devenv

if [ -n "${DEVENVALIAS}" ] ; then
  alias ${DEVENVALIAS}=devenv
  complete -F _devenv ${DEVENVALIAS}
fi

# vim: set et nu nobomb fenc=utf8 ft=bash ff=unix sw=2 ts=2:
