#!/usr/bin/env bash

set -e

SRCSYNC=${SRCSYNC:-tarball}

trap 'get_pip $? $LINENO' ERR

get_pip() {
  echo "When failing to download pip, if you got warning messages like:"
  echo "    pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available."
  echo "You may need OpenSSL lib in your flavor. Build OpenSSL with devenv by:"
  echo "    $ devenv build openssl"
}

if [ "${SRCSYNC}" == "tarball" ] ; then

  pkgname=Python
  pkgver=${VERSION:-3.13.2}
  pkgfull=${pkgname}-${pkgver}
  pkgfn=${pkgfull}.tar.xz
  pkgurl=https://www.python.org/ftp/python/${pkgver}/${pkgfn}

  download_md5 $pkgfn $pkgurl 4c2d9202ab4db02c9d0999b14655dfe5

  mkdir -p ${DEVENVFLAVORROOT}/${DEVENVFLAVOR}/src
  pushd ${DEVENVFLAVORROOT}/${DEVENVFLAVOR}/src > /dev/null
    tar xf ${DEVENVDLROOT}/$pkgfn
  popd > /dev/null

elif [ "${SRCSYNC}" == "git" ] ; then

  pkgname=cpython
  pkgbranch=${VERSION:-master}
  pkgfull=${pkgname}

  # unpack (clone)
  syncgit https://github.com/python ${pkgname} ${pkgbranch} ${pkgfull}

else

  devenv_display -e "Invalid \${SRCSYNC} ${SRCSYNC}"
  exit

fi

if [ "${DEVENV_DLONLY}" == "1" ] ; then
  echo "\${DEVENV_DLONLY}=1 ; existing"
  exit 1
else
  echo "if you want to exit after downloading: export \${DEVENV_DLONLY}=1"
fi

# build.

pushd ${DEVENVFLAVORROOT}/${DEVENVFLAVOR}/src/${pkgfull} > /dev/null

  PREFIX=${DEVENVPREFIX}
  ARCH=64

  if [ $(uname) == Darwin ]; then
    export CPPFLAGS="-I${PREFIX}/include ${CPPFLAGS}"
    export LDFLAGS="-Wl,-rpath,${PREFIX}/lib -L${PREFIX}/lib ${LDFLAGS}"
  elif [ $(uname) == Linux ]; then
    export CPPFLAGS="-I${PREFIX}/include ${CPPFLAGS}"
    export LDFLAGS="-Wl,--no-as-needed -Wl,-rpath,${PREFIX}/lib -Wl,-rpath,${PREFIX}/lib64 -L${PREFIX}/lib -L${PREFIX}/lib64"
  fi

  cfgcmd=("./configure")
  cfgcmd+=("--prefix=${PREFIX}")
  cfgcmd+=("--enable-shared")
  cfgcmd+=("--enable-ipv6")
  cfgcmd+=("--enable-optimizations")
  cfgcmd+=("--without-ensurepip")
  cfgcmd+=("--with-system-expat")
  cfgcmd+=("--with-system-libmpdec")
  cfgcmd+=("--with-readline=editline")
  cfgcmd+=("--with-lto")
  cfgcmd+=("--with-openssl=${DEVENVPREFIX}")

  if [[ $(uname) == Darwin ]] ; then
    cfgcmd+=("--with-dtrace")
    cfgcmd+=("--with-dbmliborder=ndbm")
  elif [ $(uname) == Linux ]; then
    cfgcmd+=("--with-system-ffi")
  fi

  # Some Python extension does not work properly without this, e.g., pandas.
  cfgcmd+=("--enable-loadable-sqlite-extensions")

  if [[ ${DEVENVFLAVOR} == dbg* ]] ; then
    cfgcmd+=("--with-pydebug")
  fi

  # build.
  buildcmd configure.log "${cfgcmd[@]}"
  [ ! -z "$BUILDTEST" ] && buildcmd test.log make test -j ${NP}
  # If using configure --enable-optimizations, "make profile-opt" may be
  # replaced with "make install" and two consecutive "make install" are needed.
  buildcmd profile-opt.log make profile-opt -j ${NP}
  buildcmd install.log make install -j ${NP}

  # check python version
  PY_BIN=${PREFIX}/bin/python3
  CURL_URL=https://bootstrap.pypa.io/get-pip.py

  IFS='.' read -ra VER <<< "${VERSION}"

  if [[ "${VER[0]}" == "v2" || "${VER[0]}" == "2" ]]; then
    PY_BIN=${PREFIX}/bin/python
    CURL_URL=https://bootstrap.pypa.io/pip/2.7/get-pip.py
  elif (( "${VER[0]}" == 3 && "${VER[1]}" < 6 )); then
    echo "ERROR: Python ${pkgver} is below 3.6. get-pip is not supported."
    exit 1
  elif (( "${VER[0]}" == 3 && "${VER[1]}" < 9 )); then
    CURL_URL="https://bootstrap.pypa.io/pip/${VER[0]}.${VER[1]}/get-pip.py"
  fi

  curl ${CURL_URL} | ${PY_BIN}
  rm -f ${PREFIX}/bin/pip

popd > /dev/null

# vim: set et nobomb ft=bash ff=unix fenc=utf8:
