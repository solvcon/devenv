#!/usr/bin/env bash
#
# Usage: devenv build qt
#
# 1. extracting qt source code in HOME is very slow on NCHC machine,
#    to use other src path: QTSRC=/path/to/src devenv build qt.
#    for example: QTSRC=/tmp devenv build qt
#
# 2. extraction is set by default,
#    to skip extract: SKIPEXTRACT=1 devenv build qt
#

set -e

QTSRC=${QTSRC:-${DEVENVFLAVORROOT}/${DEVENVFLAVOR}/src}
SKIPEXTRACT=${SKIPEXTRACT:-0}

if [ -z "${SYNCGIT}" ]; then
  pkgname=qt
  pkgmajorver=${MAJOR_VER:-6.8}
  pkgsubver=${SUB_VER:-1}
  pkgver=$pkgmajorver.$pkgsubver
  pkgmd5=${MD5:-4068b07ca6366bcb9ba56508bbbf20e6}
  pkgfull=$pkgname-$pkgver
  pkgfoler=qt-everywhere-src-$pkgver

  pkgfn=$pkgfull.tar.xz
  pkgurl=https://download.qt.io/official_releases/qt/$pkgmajorver/$pkgver/single/qt-everywhere-src-$pkgver.tar.xz

  download_md5 $pkgfn $pkgurl $pkgmd5

  mkdir -p ${QTSRC}
  if [ -d ${QTSRC}/$pkgfull ] || [ ${SKIPEXTRACT} -eq 1 ]; then
    echo "QTSRC: ${QTSRC}/$pkgfull already exist, skip extract"
  else
    pushd ${QTSRC} > /dev/null
      echo "QTSRC: ${QTSRC}/$pkgfull extracting ..."
      tar xf ${DEVENVDLROOT}/$pkgfn
      mv $pkgfoler $pkgfull
      echo "QTSRC: ${QTSRC}/$pkgfull extracted"
    popd
  fi
else
  pkgname=qt
  pkgbranch=${VERSION:-6.8.1}
  pkgfull=$pkgname-$pkgbranch
  # qt5 is expected here, it seems qt did not change its repository name from qt5 to qt6
  # ref : https://wiki.qt.io/Building_Qt_6_from_Git#Getting_the_source_code
  syncgit git://code.qt.io/qt qt5 ${pkgbranch} ${pkgfull}
fi

if [ "${DEVENV_DLONLY}" == "1" ] ; then
  echo "\${DEVENV_DLONLY}=1 ; existing"
  exit 1
else
  echo "if you want to exit after downloading: export \${DEVENV_DLONLY}=1"
fi

# remove symlink check
# https://github.com/Homebrew/homebrew-core/blob/29bc842d5cdffde2917bce61a1d4eb742cf6d987/Formula/qt.rb#L133
pushd ${QTSRC}/${pkgfull}
  git apply -v --directory qtbase ${DEVENVROOT}/var/patch/${pkgfull}.patch || true
popd

# build.

if [ "${DVQT_NOCLEAN}" != "1" ] ; then
  echo "Cleaning up build directory ${QTSRC}/${pkgfull}/build ..."
  echo "Set \$DVQT_NOCLEAN=1 to skip cleaning up"
  rm -rf ${QTSRC}/${pkgfull}/build # clean up previous build
  echo "Cleaned up build directory ${QTSRC}/${pkgfull}/build"
else
  echo "No cleaning up build directory ${QTSRC}/${pkgfull}/build"
fi

mkdir -p ${QTSRC}/${pkgfull}/build
pushd ${QTSRC}/${pkgfull}/build
  if [ -n "${SYNCGIT}" ]; then
    if [[ -z "$(command -v perl)" ]]; then
       echo "perl not exist!"
       exit 1
    fi
    perl init-repository -f
  fi

  cfgcmd=("cmake")
  cfgcmd+=("-DCMAKE_INSTALL_PREFIX=${DEVENVPREFIX}")
  cfgcmd+=("-DCMAKE_BUILD_TYPE=Release")
  #cfgcmd+=("-DCMAKE_BUILD_TYPE=Debug")
  #cfgcmd+=("-DBUILD_qtimageformats=OFF")
  #cfgcmd+=("-DBUILD_qtlanguageserver=OFF")
  #cfgcmd+=("-DBUILD_qtsvg=OFF")
  cfgcmd+=("-DBUILD_qtquicktimeline=OFF")
  cfgcmd+=("-DBUILD_qtquick3d=OFF")  # I cannot get it built on macos 15.4 and Xcode 16.3
  cfgcmd+=("-DBUILD_qtgraphs=OFF")  # depends on qtquick3d
  cfgcmd+=("-DBUILD_qt5compat=OFF")
  cfgcmd+=("-DBUILD_qtactiveqt=OFF")
  cfgcmd+=("-DBUILD_qtcharts=OFF")
  cfgcmd+=("-DBUILD_qtcoap=OFF")
  cfgcmd+=("-DBUILD_qtconnectivity=OFF")
  cfgcmd+=("-DBUILD_qtdatavis3d=OFF")
  cfgcmd+=("-DBUILD_qtwebsockets=OFF")
  cfgcmd+=("-DBUILD_qthttpserver=OFF")
  cfgcmd+=("-DBUILD_qttools=OFF")
  cfgcmd+=("-DBUILD_qtdoc=OFF")
  cfgcmd+=("-DBUILD_qtlottie=OFF")
  cfgcmd+=("-DBUILD_qtmqtt=OFF")
  cfgcmd+=("-DBUILD_qtnetworkauth=OFF")
  cfgcmd+=("-DBUILD_qtopcua=OFF")
  cfgcmd+=("-DBUILD_qtserialport=OFF")
  cfgcmd+=("-DBUILD_qtlocation=OFF")
  cfgcmd+=("-DBUILD_qtpositioning=OFF")
  cfgcmd+=("-DBUILD_qtquick3dphysics=OFF")
  cfgcmd+=("-DBUILD_qtremoteobjects=OFF")
  cfgcmd+=("-DBUILD_qtscxml=OFF")
  cfgcmd+=("-DBUILD_qtsensors=OFF")
  cfgcmd+=("-DBUILD_qtserialbus=OFF")
  cfgcmd+=("-DBUILD_qtspeech=OFF")
  cfgcmd+=("-DBUILD_qttranslations=OFF")
  cfgcmd+=("-DBUILD_qtvirtualkeyboard=OFF")
  cfgcmd+=("-DBUILD_qtwayland=OFF")
  cfgcmd+=("-DBUILD_qtwebchannel=OFF")
  cfgcmd+=("-DBUILD_qtwebengine=OFF")
  cfgcmd+=("-DBUILD_qtwebview=OFF")
  cfgcmd+=("-DBUILD_qtquickeffectmaker=OFF")
  cfgcmd+=("-DBUILD_qtgrpc=OFF")
  cfgcmd+=("-DBUILD_qtmultimedia=OFF")
  #cfgcmd+=("-DBUILD_qtdeclarative=OFF")
  #cfgcmd+=("-DINPUT_xcb=yes")
  #cfgcmd+=("-DINPUT_xcb_xlib=yes")
  #cfgcmd+=("-DINPUT_bundled_xcb_xinput=yes")
  #cfgcmd+=("-DINPUT_xkbcommon=yes")
  #cfgcmd+=("-DINPUT_sessionmanager=yes")
  cfgcmd+=("-DQT_ALLOW_SYMLINK_IN_PATHS=ON")
  cfgcmd+=("-DCMAKE_PREFIX_PATH=${DEVENVPREFIX}")
  cfgcmd+=("-G Ninja")
  cfgcmd+=("..")

  cmakecmd=("cmake")
  cmakecmd+=("--build")
  cmakecmd+=(".")
  cmakecmd+=("--parallel")

  installcmd=("cmake")
  installcmd+=("--install")
  installcmd+=(".")

  if [ "${DVQT_NOCONFIG}" != "1" ] ; then
    buildcmd configure.log "${cfgcmd[@]}"
  fi
  if [ "${DVQT_NOBUILD}" != "1" ] ; then
    buildcmd build.log "${cmakecmd[@]}"
  fi
  if [ "${DVQT_NOINSTALL}" != "1" ] ; then
    buildcmd install.log "${installcmd[@]}"
  fi

popd

# vim: set et nobomb ft=bash ff=unix fenc=utf8:
